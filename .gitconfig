[include]
	path = ~/.gitconfig.private
	path = ~/.gitconfig.os
[core]
	excludesfile = ~/.gitignore_global
	whitespace = -trailing-space
	autocrlf = input
	editor = code --wait
	pager = less -iXFR
[color]
	diff = always
	ui = auto
[color "status"]
	untracked = white red
	unmerged = magenta italic
[color "diff"]
	frag = magenta
	meta = yellow
	whitespace = red
[commit]
	template = ~/.stCommitMsg
[pull]
	rebase = merges
[init]
	defaultBranch = main
[status]
	showUntrackedFiles = all
[diff]
	mnemonicPrefix = true
	renames = copies
	submodule = log
	wordRegex = .
	external = difft
[difftool "p4mergetool"]
  cmd = /Applications/p4merge.app/Contents/MacOS/p4merge "$LOCAL" "$REMOTE"
  keepBackup = false
  keepTemporaries = false
  trustExitCode = false
  prompt = false
[difftool "meld"]
    cmd = meld "$LOCAL" "$REMOTE"
[difftool "vscode"]
    cmd = code --wait --diff "$LOCAL" "$REMOTE"
[fetch]
	prune = false
[log]
	abbrevCommit = true
	follow = true
[merge]
	conflictStyle = diff3
	log = true
	ff = false
[mergetool "p4mergetool"]
    cmd = /Applications/p4merge.app/Contents/MacOS/p4merge "$BASE" "$LOCAL" "$REMOTE" "$MERGED"
    keepBackup = false
    keepTemporaries = false
    trustExitCode = false
    prompt = false
[mergetool "meld"]
    cmd = meld "$LOCAL" "$MERGED" "$REMOTE" --output "$MERGED"
[mergetool "vscode"]
    cmd = code --wait "$MERGED"
[pager]
	diff = diff-so-fancy | less --tabs=2 -RFX
	show = diff-so-fancy | less --tabs=2 -RFX
[push]
	default = upstream
	followTags = true
	autoSetupRemote = true
[rerere]
	enabled = true
	autoupdate = true
[alias]
	s = status
	c = commit
	rh = reset --hard
	oops = commit --amend --no-edit
	b = branch -vv
	co = checkout
	changes = diff --name-status -r
	type = cat-file -t
	dump = cat-file -p
  lf = log --follow -p --


	lg = log --graph --abbrev-commit --date=relative -60 --all --pretty='format:%C(yellow)%h%Creset -%C(red)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset'
	lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
	lgf = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
	lg-ascii = log --graph --pretty=format:'%h -%d %s (%cr) <%an>' --abbrev-commit
	lgs = log --color --graph --pretty=format:'%C(bold white)%h%Creset -%C(bold green)%d%Creset %s %C(bold green)(%cr)%Creset %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
	authors = "!git log --pretty=format:%aN | sort | uniq -c | sort -rn"
	news = log -p HEAD@{1}..HEAD@{0}
	master = checkout
	alias = "!git config -l | grep alias | cut -c 7-"
  # Find branches containing commit
	fbcc = "!f() { git branch -a --contains $1; }; f"
	# Find tags containing commit
	ftcc = "!f() { git describe --always --contains $1; }; f"
	# Le remisage facile
	st = stash
	stl = stash list
	stp = stash pop

	# Find commits by source code
	fcbs = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fcbm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# Le rebase facile
	irb = rebase --interactive
	rb = rebase
	rba = rebase --abort
	rbc = rebase --continue
	rbs = rebase --skip

	# tout les commit liés a un fichier
	filelog = log -u

	# Easier merging
	m = merge -s recursive -X patience
	mm = merge --no-ff
	merge-branch = !git checkout master && git merge @{-1}
	conflicted = grep --name-only --full-name '<<<<<<< HEAD'
	# Pick our version of a file while merging
	ours = "!f() { git co --ours $@ && git add $@; }; f"
	# Pick their version of a file while merging
	theirs = "!f() { git co --theirs $@ && git add $@; }; f"
	changelog = "!f() { r=${1:-`git describe --tags --abbrev=0`..HEAD}; echo Changelog for $r; git log --reverse --no-merges --format='* %<(60,trunc)%s  (%h)-%<(20,trunc)%an' $r | sort; }; f"

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
